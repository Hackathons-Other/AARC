[gd_scene load_steps=8 format=2]

[ext_resource path="res://Img/external-content.duckduckgo.com.jpg" type="Texture" id=1]
[ext_resource path="res://Font/Typori_Paragraph.tres" type="DynamicFont" id=2]
[ext_resource path="res://Scene/Home/Field.gd" type="Script" id=3]
[ext_resource path="res://Font/Typori_Reg.tres" type="DynamicFont" id=4]
[ext_resource path="res://Img/icon.png" type="Texture" id=5]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 color : hint_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/color = Color( 1, 0, 0, 1 )
shader_param/width = 10.0
shader_param/pattern = 0
shader_param/inside = true
shader_param/add_margins = true

[node name="Field" type="HBoxContainer"]
margin_left = 10.0
margin_top = 61.0
margin_right = 810.0
margin_bottom = 261.0
size_flags_horizontal = 3
custom_constants/separation = 24
script = ExtResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CenterContainer" type="HBoxContainer" parent="."]
margin_right = 164.0
margin_bottom = 200.0
custom_constants/separation = 24

[node name="Icon" type="TextureRect" parent="CenterContainer"]
material = SubResource( 2 )
margin_right = 64.0
margin_bottom = 200.0
rect_min_size = Vector2( 64, 64 )
hint_tooltip = "Here's some information about the person"
mouse_default_cursor_shape = 16
size_flags_vertical = 3
texture = ExtResource( 1 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Profile" type="VBoxContainer" parent="CenterContainer"]
margin_left = 88.0
margin_right = 164.0
margin_bottom = 200.0
rect_min_size = Vector2( 64, 64 )

[node name="Name" type="Label" parent="CenterContainer/Profile"]
margin_right = 76.0
margin_bottom = 20.0
size_flags_horizontal = 5
size_flags_vertical = 0
custom_fonts/font = ExtResource( 2 )
text = "Billy Bob:"
align = 1
valign = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Percent" type="Label" parent="CenterContainer/Profile"]
modulate = Color( 0, 1, 0.576471, 1 )
margin_top = 24.0
margin_right = 76.0
margin_bottom = 63.0
hint_tooltip = "Clicking will take you to how we calculated this score (stats)"
mouse_filter = 1
mouse_default_cursor_shape = 16
size_flags_vertical = 1
custom_fonts/font = ExtResource( 4 )
text = "100%"
align = 2
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Quotes" type="Label" parent="."]
margin_left = 188.0
margin_right = 656.0
margin_bottom = 200.0
hint_tooltip = "www.link_to_source.com"
mouse_filter = 1
mouse_default_cursor_shape = 2
size_flags_horizontal = 3
size_flags_vertical = 5
custom_fonts/font = ExtResource( 2 )
text = "BeSt EnvIstmEnt Ev3R LOL!!! Icon is red if predicting goes down, green otherwise"
align = 1
valign = 1
autowrap = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Direction" type="TextureRect" parent="."]
modulate = Color( 0, 1, 0.576471, 1 )
margin_left = 680.0
margin_right = 800.0
margin_bottom = 200.0
rect_min_size = Vector2( 120, 64 )
hint_tooltip = "Green up: this person thinks stock will rise, otherwise, red down"
mouse_default_cursor_shape = 16
size_flags_vertical = 3
size_flags_stretch_ratio = 0.4
texture = ExtResource( 5 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false
}
[connection signal="gui_input" from="Quotes" to="." method="_on_Quotes_gui_input"]
